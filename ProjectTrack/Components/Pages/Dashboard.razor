@page "/dashboard"

<MudLayout>
    <MudMainContent Style="padding: 20px;">
        <!-- Light greenish background applied here -->
        <div class="dashboard-main-content">
            <div class="content-container">
                <h2 class="text-primary text-center">Dashboard Overview</h2>

                <!-- Financial Overview -->
                <div class="row mb-5">
                    <div class="col-md-2">
                        <MudPaper Class="stat-card inflows-card">
                            <h5>Total Inflows</h5>
                            <MudText Typo="Typo.h4">@TransactionService.TotalInflows.ToString("C")</MudText>
                        </MudPaper>
                    </div>
                    <div class="col-md-2">
                        <MudPaper Class="stat-card outflows-card">
                            <h5>Total Outflows</h5>
                            <MudText Typo="Typo.h4">@TransactionService.TotalOutflows.ToString("C")</MudText>
                        </MudPaper>
                    </div>
                    <div class="col-md-2">
                        <MudPaper Class="stat-card debt-card">
                            <h5>Total Debt</h5>
                            <MudText Typo="Typo.h4">@TransactionService.TotalDebt.ToString("C")</MudText>
                        </MudPaper>
                    </div>
                    <div class="col-md-2">
                        <MudPaper Class="stat-card cleared-debt-card">
                            <h5>Cleared Debt</h5>
                            <MudText Typo="Typo.h4">@TransactionService.ClearedDebt.ToString("C")</MudText>
                        </MudPaper>
                    </div>
                    <div class="col-md-2">
                        <MudPaper Class="stat-card pending-debt-card">
                            <h5>Pending Debt</h5>
                            <MudText Typo="Typo.h4">@PendingDebt.ToString("C")</MudText>
                        </MudPaper>
                    </div>
                </div>

                <!-- Highest/Lowest Transactions -->
                <div class="row mb-5">
                    <div class="col-12">
                        <MudPaper Class="pa-4" Elevation="4">
                            <h5>Highest/Lowest Transactions</h5>
                            <MudList T="string">
                                <MudListItem>
                                    <MudText Typo="Typo.body1">Highest Inflow: @HighestInflow?.Amount.ToString("C") (@HighestInflow?.Description)</MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText Typo="Typo.body1">Lowest Inflow: @LowestInflow?.Amount.ToString("C") (@LowestInflow?.Description)</MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText Typo="Typo.body1">Highest Outflow: @HighestOutflow?.Amount.ToString("C") (@HighestOutflow?.Description)</MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText Typo="Typo.body1">Lowest Outflow: @LowestOutflow?.Amount.ToString("C") (@LowestOutflow?.Description)</MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText Typo="Typo.body1">Highest Debt: @HighestDebt?.Amount.ToString("C") (@HighestDebt?.Description)</MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText Typo="Typo.body1">Lowest Debt: @LowestDebt?.Amount.ToString("C") (@LowestDebt?.Description)</MudText>
                                </MudListItem>
                            </MudList>
                        </MudPaper>
                    </div>
                </div>

                <!-- Top Transactions -->
                <div class="row">
                    <div class="col-12">
                        <MudPaper Class="pa-4" Elevation="4">
                            <h5>Top Transactions</h5>
                            <MudTable Items="@TopTransactions" T="TransactionModel">
                                <HeaderContent>
                                    <MudTh>Description</MudTh>
                                    <MudTh>Amount</MudTh>
                                    <MudTh>Date</MudTh>
                                    <MudTh>Type</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Description">@context.Description</MudTd>
                                    <MudTd DataLabel="Amount">@context.Amount.ToString("C")</MudTd>
                                    <MudTd DataLabel="Date">@context.Date.ToString("yyyy-MM-dd")</MudTd>
                                    <MudTd DataLabel="Type">@context.Type</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudPaper>
                    </div>
                </div>

                <!-- Bar Chart -->
                <div class="mt-5">
                    <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" />
                </div>
            </div>
        </div>
    </MudMainContent>
</MudLayout>

@code {
    private IEnumerable<TransactionModel> TopTransactions;
    private TransactionModel? HighestInflow;
    private TransactionModel? LowestInflow;
    private TransactionModel? HighestOutflow;
    private TransactionModel? LowestOutflow;
    private TransactionModel? HighestDebt;
    private TransactionModel? LowestDebt;

    private decimal PendingDebt;

    public List<ChartSeries> Series { get; set; } = new List<ChartSeries>();
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    protected override void OnInitialized()
    {
        TopTransactions = TransactionService.Transactions
            .OrderByDescending(t => t.Amount)
            .Take(5);

        HighestInflow = TransactionService.Transactions
            .Where(t => t.Type == "Income")
            .OrderByDescending(t => t.Amount)
            .FirstOrDefault();

        LowestInflow = TransactionService.Transactions
            .Where(t => t.Type == "Income")
            .OrderBy(t => t.Amount)
            .FirstOrDefault();

        HighestOutflow = TransactionService.Transactions
            .Where(t => t.Type == "Expense")
            .OrderByDescending(t => t.Amount)
            .FirstOrDefault();

        LowestOutflow = TransactionService.Transactions
            .Where(t => t.Type == "Expense")
            .OrderBy(t => t.Amount)
            .FirstOrDefault();

        HighestDebt = TransactionService.Transactions
            .Where(t => t.Type == "Debt")
            .OrderByDescending(t => t.Amount)
            .FirstOrDefault();

        LowestDebt = TransactionService.Transactions
            .Where(t => t.Type == "Debt")
            .OrderBy(t => t.Amount)
            .FirstOrDefault();

        PendingDebt = TransactionService.TotalDebt - TransactionService.ClearedDebt;

        Series = new List<ChartSeries>
        {
            new ChartSeries { Name = "Inflows", Data = TransactionService.Transactions
                .Where(t => t.Type == "Income").GroupBy(t => t.Date.Month)
                .OrderBy(g => g.Key)
                .Select(g => g.Sum(t => (double)t.Amount))
                .ToArray() },
            new ChartSeries { Name = "Outflows", Data = TransactionService.Transactions
                .Where(t => t.Type == "Expense").GroupBy(t => t.Date.Month)
                .OrderBy(g => g.Key)
                .Select(g => g.Sum(t => (double)t.Amount))
                .ToArray() },
        };
    }
}
