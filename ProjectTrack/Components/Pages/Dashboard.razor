@page "/dashboard"
@inject TransactionService TransactionService
@using MudBlazor
@using ProjectTrack.Service
@using ProjectTrack.Models

<MudLayout>
    <MudMainContent Style="padding: 20px;">
        <div class="dashboard-main-content">
            <div class="content-container">
                <h2 class="text-primary text-center">Dashboard Overview</h2>

                <!-- Financial Overview -->
                <div class="row mb-5">
                    <div class="col-md-2">
                        <MudPaper Class="stat-card inflows-card">
                            <h5>Total Inflows</h5>
                            <MudText Typo="Typo.h4">@TransactionService.TotalInflows.ToString("C")</MudText>
                        </MudPaper>
                    </div>
                    <div class="col-md-2">
                        <MudPaper Class="stat-card outflows-card">
                            <h5>Total Outflows</h5>
                            <MudText Typo="Typo.h4">@TransactionService.TotalOutflows.ToString("C")</MudText>
                        </MudPaper>
                    </div>
                    <div class="col-md-2">
                        <MudPaper Class="stat-card debt-card">
                            <h5>Total Debt</h5>
                            <MudText Typo="Typo.h4">@TransactionService.TotalDebt.ToString("C")</MudText>
                        </MudPaper>
                    </div>
                    <div class="col-md-2">
                        <MudPaper Class="stat-card cleared-debt-card">
                            <h5>Cleared Debt</h5>
                            <MudText Typo="Typo.h4">@TransactionService.ClearedDebt.ToString("C")</MudText>
                        </MudPaper>
                    </div>
                    <div class="col-md-2">
                        <MudPaper Class="stat-card pending-debt-card">
                            <h5>Pending Debt</h5>
                            <MudText Typo="Typo.h4">@TransactionService.PendingDebt.ToString("C")</MudText>
                        </MudPaper>
                    </div>
                </div>

                <!-- Date Range Filters -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <MudDatePicker Label="Start Date" @bind-Date="StartDate" />
                    </div>
                    <div class="col-md-3">
                        <MudDatePicker Label="End Date" @bind-Date="EndDate" />
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                        <MudButton OnClick="ApplyDateFilter" Variant="Variant.Filled" Color="Color.Primary">Apply Filter</MudButton>
                    </div>
                </div>

                <!-- Top Transactions -->
                <div class="row">
                    <div class="col-12">
                        <MudPaper Class="pa-4" Elevation="4">
                            <h5>Top Transactions</h5>
                            <MudTable Items="@TopTransactions" T="TransactionModel">
                                <HeaderContent>
                                    <MudTh>Description</MudTh>
                                    <MudTh>Amount</MudTh>
                                    <MudTh>Date</MudTh>
                                    <MudTh>Type</MudTh>
                                    <MudTh>Tags</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="transaction">
                                    <MudTd DataLabel="Description">@transaction.Description</MudTd>
                                    <MudTd DataLabel="Amount">@transaction.Amount.ToString("C")</MudTd>
                                    <MudTd DataLabel="Date">@transaction.Date.ToString("yyyy-MM-dd")</MudTd>
                                    <MudTd DataLabel="Type">@transaction.Type</MudTd>
                                    <MudTd DataLabel="Tags">@string.Join(", ", transaction.Tags ?? Enumerable.Empty<string>())</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudPaper>
                    </div>
                </div>

                <!-- Pending Debt Details Table -->
                <div class="row mt-5">
                    <div class="col-12">
                        <MudPaper Class="pa-4" Elevation="4">
                            <h5>Pending Debt Details</h5>
                            <MudTable Items="@PendingDebtTransactions" T="TransactionModel">
                                <HeaderContent>
                                    <MudTh>Description</MudTh>
                                    <MudTh>Amount</MudTh>
                                    <MudTh>Date</MudTh>
                                    <MudTh>Note</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="transaction">
                                    <MudTd DataLabel="Description">@transaction.Description</MudTd>
                                    <MudTd DataLabel="Amount">@transaction.Amount.ToString("C")</MudTd>
                                    <MudTd DataLabel="Date">@transaction.Date.ToString("yyyy-MM-dd")</MudTd>
                                    <MudTd DataLabel="Note">@transaction.Note</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudPaper>
                    </div>
                </div>

                <!-- Bar Chart: Top Transactions -->
                <div class="row mt-5">
                    <!-- Bar Chart: Top Transactions -->
                    <div class="row mt-5">
                        <div class="col-12">
                            <MudPaper Class="pa-4" Elevation="4">
                                <h5>Bar Chart: Top Transactions (Amount vs Description)</h5>
                                <MudChart ChartType="ChartType.Bar" ChartSeries="@DynamicChartSeries" XAxisLabels="@DynamicXAxisLabels" YAxisLabels="@DynamicYAxisLabels" Width="100%" Height="350px" />
                            </MudPaper>
                        </div>
                    </div>

            </div>
        </div>
        </div>
    </MudMainContent>
</MudLayout>

@code {
    private IEnumerable<TransactionModel> TopTransactions = Enumerable.Empty<TransactionModel>();
    private IEnumerable<TransactionModel> PendingDebtTransactions = Enumerable.Empty<TransactionModel>();

    private DateTime? StartDate;
    private DateTime? EndDate;

    public List<ChartSeries> DynamicChartSeries { get; set; } = new();
    
    public string[] DynamicXAxisLabels { get; set; } = Array.Empty<string>();
    public string[] DynamicYAxisLabels { get; set; } = Array.Empty<string>();

    protected override void OnInitialized()
    {
        LoadDashboardData();
    }

    private void LoadDashboardData()
    {
        var filteredTransactions = TransactionService.Transactions;

        // Apply date range filter
        if (StartDate.HasValue)
            filteredTransactions = filteredTransactions.Where(t => t.Date >= StartDate.Value).ToList();

        if (EndDate.HasValue)
            filteredTransactions = filteredTransactions.Where(t => t.Date <= EndDate.Value).ToList();

        // Top Transactions
        TopTransactions = filteredTransactions.OrderByDescending(t => t.Amount).Take(5);

        // Pending Debt Transactions
        PendingDebtTransactions = filteredTransactions.Where(t => t.Type == "Debt" && t.Amount > 0);

        // Update Chart Data
        UpdateDynamicChart();
    }
    private void UpdateDynamicChart()
    {
        // Prepare data for the bar chart
        DynamicYAxisLabels = TopTransactions
            .Select(t => t.Description.Length > 15
                ? t.Description.Substring(0, 15) + "..." // Truncate long descriptions
                : t.Description)
            .ToArray();

        DynamicChartSeries = new List<ChartSeries>
    {
        new ChartSeries
        {
            Name = "Amount",
            Data = TopTransactions.Select(t => (double)t.Amount).ToArray()
        }
    };
    }


   

    private void ApplyDateFilter()
    {
        LoadDashboardData();
    }
}
