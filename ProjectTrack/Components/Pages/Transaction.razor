@page "/transactions"
@inherits TransactionsBase

<MudLayout>
    <MudMainContent>
        <div class="container mt-4">
            <h3 class="text-primary">Transactions</h3>

            <!-- Filter, Sort, and Search Section -->
            <div class="mb-4">
                <div class="row">
                    <div class="col-md-3">
                        <label for="filterType" class="form-label">Filter by Type</label>
                        <select id="filterType" class="form-control" @bind="FilterType">
                            <option value="">All</option>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                            <option value="Debt">Debt</option>
                            <option value="Debt Payment">Debt Payment</option>
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label for="startDate" class="form-label">Start Date</label>
                        <input type="date" id="startDate" class="form-control" @bind="StartDate" />
                    </div>

                    <div class="col-md-4">
                        <label for="sortOrder" class="form-label">Sort by Date</label>
                        <select id="sortOrder" class="form-control" @bind="SortOrder">
                            <option value="Ascending">Ascending</option>
                            <option value="Descending">Descending</option>
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label for="searchQuery" class="form-label">Search by Description</label>
                        <input id="searchQuery" class="form-control" @bind="SearchQuery" placeholder="Enter keywords..." />
                    </div>
                </div>
                <button class="btn btn-primary mt-3" @onclick="ApplyFilters">Apply Filters</button>
            </div>

            <!-- Add/Edit Transaction Button -->
            <button class="btn btn-primary mb-3" @onclick="ToggleAddTransactionForm">
                <i class="bi bi-plus-circle"></i> New Transaction
            </button>

            <!-- Add/Edit Transaction Form -->
            @if (showAddTransactionForm)
            {
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title">@((editingTransaction != null) ? "Edit Transaction" : "Add New Transaction")</h5>
                            <form>
                                <div class="mb-3">
                                    <label>Description</label>
                                    <input class="form-control" @bind="currentTransaction.Description" />
                                </div>
                                <div class="mb-3">
                                    <label>Amount</label>
                                    <input type="number" class="form-control" @bind="currentTransaction.Amount" />
                                </div>
                                <div class="mb-3">
                                    <label>Date</label>
                                    <input type="date" class="form-control" @bind="currentTransaction.Date" />
                                </div>
                                <div class="mb-3">
                                    <label for="type" class="form-label">Type</label>
                                    <select id="type" class="form-control" @bind="currentTransaction.Type">
                                        <option value="Income">Income</option>
                                        <option value="Expense">Expense</option>
                                        <option value="Debt">Debt</option>
                                        <option value="Debt Payment">Debt Payment</option>
                                    </select>
                                </div>
                                 <div class="mb-3">
                                     <label for="type" class="form-label">Tag</label>
                                     <select class="form-control" @bind="currentTransaction.SelectedTag">
                                         <option value="" disabled>Select a tag</option>
                                              @foreach (var tag in AvailableTags)
                                               {
                                               <option value="@tag.Name">@tag.Name</option>
                                               }
                                     </select>
                                 </div>


                                <div class="mb-3">
                                    <label>Note</label>
                                    <textarea class="form-control" placeholder="Optional note..." @bind="currentTransaction.Note"></textarea>
                                </div>

                                <button type="button" class="btn btn-success me-2" @onclick="SaveTransaction">Save</button>
                                <button type="button" class="btn btn-secondary" @onclick="CancelTransactionForm">Cancel</button>
                            </form>
                        </div>
                    </div>
            }

            <!-- Transaction List -->
            <div class="card mt-4">
                <div class="card-body">
                    <h5 class="card-title">Transaction List</h5>
                    <p><strong>Total Transactions:</strong> @FilteredTransactions.Count</p>
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Description</th>
                                <th>Amount</th>
                                <th>Date</th>
                                <th>Type</th>
                                <th>Tag</th>
                                <th>Note</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var transaction in FilteredTransactions)
                            {
                                    <tr>
                                        <td>@transaction.Description</td>
                                        <td>@transaction.Amount.ToString("C")</td>
                                        <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                                        <td>@transaction.Type</td>
                                        <td>@(transaction.Tags.Count > 0 ? transaction.Tags[0] : "None")</td>
                                        <td>@transaction.Note</td>
                                        <td>
                                            <button class="btn btn-warning btn-sm" @onclick="() => EditTransaction(transaction)">Edit</button>
                                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteTransaction(transaction)">Delete</button>
                                        </td>
                                    </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </MudMainContent>
</MudLayout>
@code {

    private string FilterType { get; set; } = "";
    private string SearchQuery { get; set; } = "";
    private string SortOrder { get; set; } = "Ascending";
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }

    protected TransactionModel? editingTransaction { get; set; }
    protected bool showAddTransactionForm { get; set; } = false;

    private List<TagModel> AvailableTags { get; set; } = new();
    protected TransactionModel currentTransaction { get; set; } = new() { Date = DateTime.Now, Type = "Income", Tags = new List<string>() };
    protected List<TransactionModel> Transactions => TransactionService.Transactions;

    private List<TransactionModel> FilteredTransactions => ApplySorting(ApplySearch(ApplyDateFilter(ApplyFilter(Transactions))));

    protected override void OnInitialized()
    {
        // Load tags when the component is initialized
        AvailableTags = TagService.GetAllTags();
    }

    protected void ApplyFilters()
    {
        StateHasChanged();
    }

    private List<TransactionModel> ApplyFilter(List<TransactionModel> transactions)
    {
        return string.IsNullOrEmpty(FilterType) ? transactions : transactions.Where(t => t.Type == FilterType).ToList();
    }

    private List<TransactionModel> ApplySearch(List<TransactionModel> transactions)
    {
        return string.IsNullOrEmpty(SearchQuery)
            ? transactions
            : transactions.Where(t => t.Description.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private List<TransactionModel> ApplyDateFilter(List<TransactionModel> transactions)
    {
        return transactions
            .Where(t => !StartDate.HasValue || t.Date >= StartDate.Value)
            .Where(t => !EndDate.HasValue || t.Date <= EndDate.Value)
            .ToList();
    }

    private List<TransactionModel> ApplySorting(List<TransactionModel> transactions)
    {
        return SortOrder == "Ascending"
            ? transactions.OrderBy(t => t.Date).ToList()
            : transactions.OrderByDescending(t => t.Date).ToList();
    }

    protected void SaveTransaction()
    {
        // Validation for mandatory fields
        if (string.IsNullOrWhiteSpace(currentTransaction.Description))
        {
            Snackbar.Add("Error: Description is required!", Severity.Error);
            return;
        }

        if (currentTransaction.Amount <= 0)
        {
            Snackbar.Add("Error: Amount must be greater than zero!", Severity.Error);
            return;
        }

        if (currentTransaction.Date == default)
        {
            Snackbar.Add("Error: Date is required!", Severity.Error);
            return;
        }
        if (!string.IsNullOrWhiteSpace(currentTransaction.SelectedTag))
        {
            currentTransaction.Tags = new List<string> { currentTransaction.SelectedTag };
        }
        // Validation passed, proceed to save
        if (editingTransaction != null)
        {
            editingTransaction.Description = currentTransaction.Description;
            editingTransaction.Amount = currentTransaction.Amount;
            editingTransaction.Date = currentTransaction.Date;
            editingTransaction.Type = currentTransaction.Type;
            editingTransaction.Tags = currentTransaction.Tags;


            Snackbar.Add("Transaction updated successfully!", Severity.Success);
        }
        else
        {
            TransactionService.AddTransaction(currentTransaction);
            Snackbar.Add("New transaction added successfully!", Severity.Success);
        }

        CancelTransactionForm();
    }

    protected void ToggleAddTransactionForm()
    {
        showAddTransactionForm = !showAddTransactionForm;
        if (!showAddTransactionForm)
        {
            CancelTransactionForm();
        }
    }

    protected void EditTransaction(TransactionModel transaction)
    {
        editingTransaction = transaction;
        currentTransaction = new TransactionModel
            {
                Description = transaction.Description,
                Amount = transaction.Amount,
                Date = transaction.Date,
                Type = transaction.Type,
                Tags = new List<string>(transaction.Tags),
                Note = transaction.Note
            };
        showAddTransactionForm = true;
    }

    protected void CancelTransactionForm()
    {
        currentTransaction = new TransactionModel
            {
                Date = DateTime.Now,
                Type = "Income",
                Tags = new List<string>()
            };
        editingTransaction = null;
        showAddTransactionForm = false;
    }

    protected void DeleteTransaction(TransactionModel transaction)
    {
        TransactionService.RemoveTransaction(transaction);
        Snackbar.Add("Transaction deleted successfully!", Severity.Info);
    }
}
